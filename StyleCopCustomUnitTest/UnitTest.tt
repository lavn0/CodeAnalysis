<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output encoding="UTF-8" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)\PhoenixCustomUnitTest\bin\$(ConfigurationName)\PhoenixCustomUnitTest.dll" #>
<#@ assembly name="$(SolutionDir)\TestUtility\bin\$(ConfigurationName)\TestUtility.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="TestUtility" #>
using System.IO;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using StyleCopContrib.Runner;

namespace StyleCopCustomUnitTest
{
	[TestClass]
	public class StyleCopUnitTest
	{
		private const string settingPath = "NullSettings.StyleCop";
<#
	var directoryPath = Host.ResolvePath("TestSources");
	var sourceFiles = Directory.EnumerateFiles(directoryPath, "*.cs", SearchOption.AllDirectories);

	foreach (var sourceFile in sourceFiles)
	{
		var fileName = Path.GetFileNameWithoutExtension(sourceFile);
		var sourceCode = File.ReadAllText(sourceFile);
		var matches = Regex.Matches(sourceCode, @"^[\t ]*//\s*ERROR\((\s*(?<start>\d+)\s*(,\s*(?<end>\d+)\s*)?)?\).*?\n", RegexOptions.Multiline).Cast<Match>().ToList();
		var lines = matches.Select(m => sourceCode.Substring(0, m.Index).Count(c => c == '\n')).ToList();
		for (int i = 0; i < lines.Count; i++)
		{
			lines[i] -= i;
		}
#>

		[TestMethod]
		public void <#= fileName #>()
		{
			var path = @"TestSources\\<#= fileName #>.cs";
			if (!File.Exists(path))
			{
				throw new FileNotFoundException(path + " が見つかりません。");
			}

			var result = StyleCopUtil.RunStyleCop(settingPath, path);
			var violations = result.Violations.Where(v => v.Rule.Name == "<#= fileName #>").ToList();

<#
		for (int i = 0; i < lines.Count; i++)
		{
			int line = lines[i] + 1;
#>
			Assert.AreEqual(<#= line #>, violations[<#= i #>].Line, "エラー[<#= i #>]の開始行が期待値と異なります。");
<#
			int columnIndexStart;
			if (int.TryParse(matches[i].Groups["start"].Value, out columnIndexStart))
			{
#>
			Assert.AreEqual(<#= columnIndexStart #>, violations[<#= i #>].Location.Value.StartPoint.IndexOnLine, "エラー[<#= i #>]の開始位置が期待値と異なります。");
<#
			}

			int columnIndexEnd;
			if (int.TryParse(matches[i].Groups["end"].Value, out columnIndexEnd))
			{
#>
			Assert.AreEqual(<#= columnIndexEnd #>, violations[<#= i #>].Location.Value.EndPoint.IndexOnLine, "エラー[<#= i #>]の終了位置が期待値と異なります。");
<#
			}
		}
#>
			Assert.AreEqual(<#= matches.Count #>, violations.Count);
		}
<#
	}
#>
	}
}