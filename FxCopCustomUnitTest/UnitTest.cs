using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace FxCopCustomUnitTest
{
	[TestClass]
	public class FxCopCustomUnitTest : BaseFxCopUnitTest
	{
		public TestContext TestContext { get; set; }

		[TestMethod]
		public void CompareZeroToCountResultSample()
		{
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK1_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK1_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK2_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK2_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK4_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK4_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK5_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK5_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK7_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK7_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK8_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK8_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK10_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK10_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK11_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK11_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK13_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK13_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK14_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK14_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK16_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK16_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK17_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK17_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK20_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK20_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK23_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK23_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK26_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK26_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK29_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK29_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK31_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK31_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK32_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK32_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK34_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK34_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(0, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "OK35_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "OK35_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG1_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG1_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Any", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG1_Any(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG1_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG2_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG2_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("TakeCount", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG2_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG2_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG3_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG3_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG3_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG3_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG4_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG4_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Any", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG4_Any(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG4_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG5_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG5_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("TakeCount", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG5_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG5_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG6_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG6_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG6_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG6_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG7_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG7_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Any", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG7_Any(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG7_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG8_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG8_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("TakeCount", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG8_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG8_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG9_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG9_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG9_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG9_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG10_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG10_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Any", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG10_Any(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG10_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG11_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG11_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("TakeCount", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG11_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG11_TakeCount(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG12_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG12_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG12_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG12_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG13_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG13_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Any", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG13_Any(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG13_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG14_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG14_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("SkipAny", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG14_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG14_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG15_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG15_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG15_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG15_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG16_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG16_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Any", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG16_Any(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG16_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG17_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG17_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("SkipAny", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG17_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG17_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG18_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG18_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG18_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG18_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG19_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG19_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG19_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG19_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG20_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG20_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Any", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG20_Any(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG20_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG21_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG21_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG21_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG21_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG22_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG22_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG22_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG22_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG23_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG23_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Any", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG23_Any(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG23_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG24_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG24_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG24_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG24_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG25_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG25_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG25_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG25_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG26_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG26_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Any", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG26_Any(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG26_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG27_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG27_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG27_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG27_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG28_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG28_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG28_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG28_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG29_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG29_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Any", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG29_Any(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG29_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG30_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG30_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG30_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG30_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG31_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG31_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Any", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG31_Any(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG31_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG32_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG32_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("SkipAny", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG32_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG32_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG33_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG33_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG33_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG33_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG34_Any(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG34_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Any", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG34_Any(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG34_Any(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG35_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG35_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("SkipAny", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG35_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG35_SkipAny(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(1, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG36_Error(System.Collections.Generic.IEnumerable`1<System.Object>)").Count, "NG36_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual("Error", this.GetError("CompareZeroToCountResult", "CompareZeroToCountResultSample", "NG36_Error(System.Collections.Generic.IEnumerable`1<System.Object>)")?.Attribute("Name").Value, "ResolutionName: NG36_Error(System.Collections.Generic.IEnumerable`1<System.Object>)");
			Assert.AreEqual(36, this.GetErrors("CompareZeroToCountResult", "CompareZeroToCountResultSample").Count);
		}

		[TestMethod]
		public void AsignedConstOnlySample()
		{
			Assert.AreEqual(1, this.GetErrors("AsignedConstOnly", "AsignedConstOnlySample", "NG1()").Count, "NG1()");
			Assert.AreEqual(1, this.GetErrors("AsignedConstOnly", "AsignedConstOnlySample", "NG2()").Count, "NG2()");
			Assert.AreEqual(1, this.GetErrors("AsignedConstOnly", "AsignedConstOnlySample", "NG3()").Count, "NG3()");
			Assert.AreEqual(0, this.GetErrors("AsignedConstOnly", "AsignedConstOnlySample", "OK1()").Count, "OK1()");
			Assert.AreEqual(0, this.GetErrors("AsignedConstOnly", "AsignedConstOnlySample", "OK2()").Count, "OK2()");
			Assert.AreEqual(0, this.GetErrors("AsignedConstOnly", "AsignedConstOnlySample", "OK3()").Count, "OK3()");
			Assert.AreEqual(3, this.GetErrors("AsignedConstOnly", "AsignedConstOnlySample").Count);
		}
	}
}